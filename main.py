
import streamlit as st
import numpy as np
from PIL import Image
import torch
import torch.nn.functional as F
from tensorflow.keras.models import load_model
from torchvision import transforms

# --- Load Models ---
@st.cache_resource
def load_models():
    classifier = torch.load("DigitClassifier.pth", map_location=torch.device("cpu"))
    classifier.eval()
    generator = load_model("generator_model.h5")
    return classifier, generator

classifier, generator = load_models()

# --- UI ---
st.title("Handwritten Digit Recognition & Generation")

uploaded_file = st.file_uploader("Upload a digit image (28x28 grayscale)", type=["png", "jpg", "jpeg"])

if uploaded_file:
    image = Image.open(uploaded_file).convert("L").resize((28, 28))
    st.image(image, caption="Uploaded Digit", width=150)

    image_np = np.array(image)
    image_tensor = torch.tensor(image_np / 255.0).float().unsqueeze(0).unsqueeze(0)

    with torch.no_grad():
        output = classifier(image_tensor)
        pred = torch.argmax(F.softmax(output, dim=1), dim=1).item()

    st.subheader(f"ðŸ§  Predicted Digit: {pred}")

    latent_dim = 128
    noise = np.random.normal(0, 1, (1, latent_dim))
    label = np.array([pred])
    label = np.reshape(label, (-1, 1))

    # Concatenate noise and label
    gen_input = [noise, label]
    gen_image = generator.predict(gen_input)[0]
    gen_image = (gen_image * 127.5 + 127.5).astype(np.uint8)

    st.subheader("ðŸŽ¨ Digit Image Generated by cGAN")
    st.image(gen_image.reshape(28, 28), width=150, clamp=True)
